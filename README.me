# Fluent BDD

Fluent BDD is a minimalistic testing framework with a fluent API.

A Scenario is defined as a sequence of Conditions, followed by
a series of Events and the Clauses that must be satiesfied at
the end. Multiple Conditions, Events and Clauses can be specified.

## Fluent API

The API for defining a test scenario follows a fluent style.
Function calls can be chanined in a close-to-english syntax.

Example:
    ```
    Scenario("Test scenario").Given(f1, 1, 'A').When(f2,1, a=3, b=2).Then(f3).Is(True).Run()
    ```

Multiple Conditions, Events and Clauses can be chained using the 'And' connector:

Example:
    ```
    Scenario("Multiple conditions")        \
        .Given(f1, 1, 'B').And(f1, 1, 'A') \
        .When(f2, a=3, b=1)                \
        .Then(f3).Is(True)                 \
        .Run()

## Function invocation

Actions, Events and Clauses receive a function as first parameter,
followed by a (potentially empty) sequence of arguments, and
an optional series of named arguments.

The functions used in the statements can be static methods or instance method.

Example:

    ```
    class SUT:
        
	def f(self):
            return
	
	def v(self):
	    return True

    def verify(sut):
        return sut.v()

    s = SUT()
    Scenario("Class methods").when(s.f).then(verify,s).Is(True).Run()
    ```

## Clauses and assertions

Clauses are defined as a invocation of a function followed by an assertion on the returning value.
Supported assertions are:
* Is(value)
* IsNot(value)


(c) 2019 Pablo Chacin
